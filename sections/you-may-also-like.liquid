{% comment %}
  Section para sugestões de produtos "You may also like"
{% endcomment %}

<div class="you-may-also-like">
  <h2 class="section-title">You may also like</h2>
  <div class="product-slider js-draggable-slider">
    {% assign collection_handle = section.settings.collection | default: product.collections.first.handle %}
    {% assign collection = collections[collection_handle] %}
    {% assign current_product = product %}
    {% assign products_shown = 0 %}
    {% for recommended_product in collection.products %}
      {% if recommended_product.id != current_product.id and products_shown < section.settings.product_limit %}
        {% assign products_shown = products_shown | plus: 1 %}
        <div class="product-item">
          <a href="{{ recommended_product.url }}" class="product-link">
            <img src="{{ recommended_product.featured_image | img_url: 'medium' }}" alt="{{ recommended_product.title }}" class="product-image" width="300" height="300">
            <div class="product-info">
              <h3 class="product-title">{{ recommended_product.title }}</h3>
              <h4 class="product-subtitle">{{ collection.title }}</h4>
              <p class="product-price">
                {{ recommended_product.price | money_without_trailing_zeros }}
                {% if recommended_product.compare_at_price > recommended_product.price %}
                  <span class="compare-price">{{ recommended_product.compare_at_price | money_without_trailing_zeros }}</span>
                {% endif %}
              </p>
              {% comment %} <button class="view-button">View</button> {% endcomment %}
            </div>
          </a>
        </div>
      {% endif %}
    {% endfor %}
  </div>
</div>

{% schema %}
{
  "name": "You may also like",
  "settings": [
    {
      "type": "collection",
      "id": "collection",
      "label": "Collection"
    },
    {
      "type": "range",
      "id": "product_limit",
      "label": "Number of Products",
      "min": 2,
      "max": 10,
      "default": 4
    }
  ],
  "presets": [
    {
      "name": "You may also like",
      "category": "Product"
    }
  ]
}
{% endschema %}

{% style %}
  .you-may-also-like {
    padding: 40px 0;
  }
  .section-title {
    font-size: .9rem;
    font-weight: bold;
    margin-bottom: 20px;
    padding: 0 15px;
  }
  .product-slider {
    display: flex;
    overflow-x: auto;
    gap: 15px;
    padding: 8px 15px;
    scrollbar-width: none; 
    scroll-behavior: smooth;
    cursor: grab;
    -webkit-overflow-scrolling: touch;
  }
  .product-slider::-webkit-scrollbar {
    display: none; 
  }
  .product-slider.dragging {
    cursor: grabbing;
    scroll-behavior: auto;
  }
  .product-slider.dragging .product-link {
    pointer-events: none;
  }
  .product-item {
    flex: 0 0 auto;
    width: 198px;
    background-color: #fff;
    border-radius: 10px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
    transition: transform 0.3s ease;
    user-select: none;
  }
  .product-item:hover {
    transform: translateY(-5px);
  }
  .product-link {
    text-decoration: none;
    color: inherit;
  }
  .product-image {
    width: 100%;
    height: 188px;
    /* background: #f6f6f6; */
    background: rgb(248, 248, 248);
    border-bottom: 1.5px solid #e2e2e2;
    border-radius: 8px 8px 0 0;
  }
  .product-info {
    padding: 10px;
  }
  .product-title {
    font-size: .8rem;
    font-weight: bold;
    margin: 0 0 5px;
  }
  .product-subtitle {
    font-size: .8rem;
    font-weight: 400;
    color: #888;
  }
  .product-price {
    font-size: 14px;
    font-weight: 700;
    color: #000;
  }
  .compare-price {
    text-decoration: line-through;
    color: #888;
    margin-left: 5px;
    font-weight: 400;
  }
  .view-button {
    background-color: #000;
    color: #fff;
    border: none;
    padding: 10px;
    width: 100%;
    text-align: center;
    font-weight: bold;
    cursor: pointer;
    border-radius: 0 0 8px 8px;
  }
  .view-button:hover {
    background-color: #333;
  }
{% endstyle %} 

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const sliders = document.querySelectorAll('.js-draggable-slider');
    
    sliders.forEach(slider => {
      let isDown = false;
      let startX;
      let scrollLeft;
      let isDragging = false;
      
      // Mouse Events
      slider.addEventListener('mousedown', (e) => {
        isDown = true;
        slider.classList.add('dragging');
        startX = e.pageX - slider.offsetLeft;
        scrollLeft = slider.scrollLeft;
      });
      
      slider.addEventListener('mouseleave', () => {
        isDown = false;
        isDragging = false;
        slider.classList.remove('dragging');
      });
      
      slider.addEventListener('mouseup', () => {
        isDown = false;
        slider.classList.remove('dragging');
        // Se não houve arrasto, permite o clique no link
        if (!isDragging) {
          const link = e.target.closest('.product-link');
          if (link) {
            window.location.href = link.href;
          }
        }
        isDragging = false;
      });
      
      slider.addEventListener('mousemove', (e) => {
        if(!isDown) return;
        e.preventDefault();
        isDragging = true;
        const x = e.pageX - slider.offsetLeft;
        const walk = (x - startX) * 1.5;
        slider.scrollLeft = scrollLeft - walk;
      });
      
      // Touch Events
      let touchStartTime;
      
      slider.addEventListener('touchstart', (e) => {
        isDown = true;
        touchStartTime = new Date().getTime();
        slider.classList.add('dragging');
        startX = e.touches[0].pageX - slider.offsetLeft;
        scrollLeft = slider.scrollLeft;
      });
      
      slider.addEventListener('touchend', (e) => {
        isDown = false;
        slider.classList.remove('dragging');
        const touchEndTime = new Date().getTime();
        const touchDuration = touchEndTime - touchStartTime;
        
        // Se o toque durou menos que 200ms, considera como um tap
        if (touchDuration < 200 && !isDragging) {
          const link = e.target.closest('.product-link');
          if (link) {
            window.location.href = link.href;
          }
        }
        isDragging = false;
      });
      
      slider.addEventListener('touchmove', (e) => {
        if(!isDown) return;
        isDragging = true;
        const x = e.touches[0].pageX - slider.offsetLeft;
        const walk = (x - startX) * 1.5;
        slider.scrollLeft = scrollLeft - walk;
      });
    });
  });
</script> 